#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <wait.h>

void fork_f(char *comm, char *argv[]){
 
 pid_t child_id;
 int status;
 
 child_id = fork();
 

   if (child_id < 0) {
      exit(EXIT_FAILURE); // Jika gagal membuat proses baru, program akan berhenti
   }

   if (child_id == 0) {
      // this is child
      execv(comm, argv);
   } else {
      // this is parent
      while ((wait(&status)) > 0);
   }
 return;
}

void download_zip(){

 char *argv[] = {"wget", "--no-check-certificate", "https://drive.google.com/u/0/uc?id=1FsrAzb9B5ixooGUs0dGiBr-rC7TS9wTD&export=download", "-O", "Foto_for_Stevany.zip", NULL};
 fork_f("/bin/wget", argv);
 
 char *argv2[] = {"wget", "--no-check-certificate", "https://drive.google.com/uc?id=1ZG8nRBRPquhYXq_sISdsVcXx5VdEgi-J&export=download", "-O", "Musik_for_Stevany.zip", NULL};
 fork_f("/bin/wget", argv2);
 
 char *argv3[] = {"wget", "--no-check-certificate", "https://drive.google.com/u/0/uc?id=1ktjGgDkL0nNpY-vT7rT7O6ZI47Ke9xcp&export=download", "-O", "Film_for_Stevany.zip", NULL};
 fork_f("/bin/wget", argv3);
  
 return;
}

void extract_zip() {

     char *argv[] = {"unzip", "*.zip", NULL};
 fork_f("/bin/unzip", argv);
 
 return;
}

void rename_folder() {
 char *argv[] = {"mv", "FOTO", "Pyoto", NULL};
 fork_f("/bin/mv", argv);
 
 char *argv2[] = {"mv", "MUSIK", "Musyik", NULL};
 fork_f("/bin/mv", argv2);
 
 char *argv3[] = {"mv", "FILM", "Fylm", NULL};
 fork_f("/bin/mv", argv3);
 return;
}

void delete_zip() {

     char *argv[] = {"rm", "-r", "Foto_for_Stevany.zip", "Musik_for_Stevany.zip", "Film_for_Stevany.zip", NULL};
 fork_f("/bin/rm", argv);
 
 return;
}

void zip_folder() {

     char *argv[] = {"zip", "-r", "Lopyu_Stevany.zip", "Pyoto", "Musyik", "Fylm", NULL};
 fork_f("/bin/zip", argv);
 
 return;
}

void delete_folder() {

     char *argv[] = {"rm", "-r", "Pyoto", "Musyik", "Fylm", NULL};
 fork_f("/bin/rm", argv);
 
 return;
}


int main() {
 
   download_zip();
   extract_zip();
   rename_folder();
   delete_zip();
   zip_folder();
   delete_folder();
 printf("This line will not be executed\n");
  
   return 0;
}